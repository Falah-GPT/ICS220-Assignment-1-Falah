from enum import Enum

# Enum for Room Size
class RoomSize(Enum):
    SMALL = "Small"
    MEDIUM = "Medium"
    LARGE = "Large"

# Enum for Room Type
class RoomType(Enum):
    DELUXE_KING = "Deluxe King"
    DELUXE_TWIN = "Deluxe Twin"
    EXECUTIVE_SUITE = "Executive Suite"

class Reservation:
    def __init__(self, confirmation, checkin, checkout, guestcount, nights, room, status):
        self._confirmation = confirmation
        self._checkin = checkin
        self._checkout = checkout
        self._guestcount = guestcount
        self._nights = nights
        self._room=room
        self._status = status

    # Setters and Getters
    def setCheckin(self, checkin):
        self._checkin = checkin

    def getCheckin(self):
        return self._checkin

    def setCheckout(self, checkout):
        self._checkout = checkout

    def getCheckout(self):
        return self._checkout

    def setStatus(self, status):
        self._status = status

    def getStatus(self):
        return self._status

    def setNights(self, Nights):
        self._Nights = Nights

    def getNights(self):
        return self._Nights

    def setGuestCount(self, guestcount):
        self._guestcount = guestcount

    def getGuestCount(self):
        return self._guestcount
    
    #this is where the room cost is calculated
    def calculateTotalCost(self):
        return self._room.getPrice() * self._nights

    # Methods
    def makeReservation(self):
        print("Reservation made.")

    def cancelReservation(self):
        self._status = "Cancelled"
        print("Reservation cancelled.")

    def editReservation(self):
        print("Reservation edited.")

    def viewReservation(self):
        total_cost = self.calculateTotalCost()
        print(
            f"Reservation Details: Confirmation #{self._confirmation}, Check-in: {self._checkin}, Check-out: {self._checkout}, Guests: {self._guestcount}, Number of nights: {self._nights}, Room Cost: {total_cost}, Status: {self._status}")

class Room:
    def __init__(self, number, room_type: RoomType, price, size: RoomSize, availability, floor):
        self._number = number
        self._room_type = room_type
        self._price = price
        self._size = size
        self._availability = availability
        self._floor = floor

    # Setters and Getters
    def setRoomType(self, room_type: RoomType):
        self._room_type = room_type

    def getRoomType(self):
        return self._room_type

    def setPrice(self, price):
        self._price = price

    def getPrice(self):
        return self._price

    def setAvailability(self, availability):
        self._availability = availability

    def getAvailability(self):
        return self._availability

    def setRoomSize(self, size: RoomSize):
        self._size = size

    def getRoomSize(self):
        return self._size

    def setFloor(self, floor):
        self._floor = floor

    def getFloor(self):
        return self._floor

    # Methods
    def checkAvailability(self):
        if self._availability:
            print(f"Room {self._number} is available.")
        else:
            print(f"Room {self._number} is not available.")

class Guest:
    def __init__(self, guest_id, name, email, phone, birthdate, nationality):
        self._guest_id = guest_id
        self._name = name
        self._email = email
        self._phone = phone
        self._birthdate = birthdate
        self._nationality = nationality

    # Setters and Getters
    def setName(self, name):
        self._name = name

    def getName(self):
        return self._name

    def setEmail(self, email):
        self._email = email

    def getEmail(self):
        return self._email

    def setPhone(self, phone):
        self._phone = phone

    def getPhone(self):
        return self._phone

    def setBirthDate(self, birthdate):
        self._birthdate = birthdate

    def getBirthDate(self):
        return self._birthdate

    def setNationality(self, nationality):
        self._nationality = nationality

    def getNationality(self):
        return self._nationality

    # Methods
    def registerGuest(self):
        print(f"Guest {self._name} registered.")

    def viewReservation(self, reservation):
        reservation.viewReservation()

class Payment:
    def __init__(self, tran_id, amount, payment_status, payment_method, payment_date, transaction_fee):
        self._tran_id = tran_id
        self._amount = amount
        self._payment_status = payment_status
        self._payment_method = payment_method
        self._payment_date = payment_date
        self._transaction_fee = transaction_fee

    # Setters and Getters
    def setAmount(self, amount):
        self._amount = amount

    def getAmount(self):
        return self._amount

    def setPaymentStatus(self, payment_status):
        self._payment_status = payment_status

    def getPaymentStatus(self):
        return self._payment_status

    def setPaymentMethod(self, payment_method):
        self._payment_method = payment_method

    def getPaymentMethod(self):
        return self._payment_method

    def setPaymentDate(self, payment_date):
        self._payment_date = payment_date

    def getPaymentDate(self):
        return self._payment_date

    def setTransactionFee(self, transaction_fee):
        self._transaction_fee = transaction_fee

    def getTransactionFee(self):
        return self._transaction_fee

    # Methods
    def processPayment(self):
        print(f"Payment of {self._amount} processed. Status: {self._payment_status}")

        #this is where the charges with tax are calculated
    def calculateCharges(self, tax_percentage):
        tax_amount = self._amount * (tax_percentage / 100)
        total_with_tax = self._amount + tax_amount
        print(f"Total amount with {tax_percentage}% tax: {total_with_tax}")
        self._amount = total_with_tax

        #this is where the discount is calculated
    def applyDiscount(self, discount_percentage):
        discount_amount = self._amount * (discount_percentage / 100)
        self._amount -= discount_amount
        print(f"Discount of {discount_percentage}% applied. New amount: {self._amount}")

class Receipt:
    def __init__(self, receipt_number, issue_date, receipt_amount, payment_reference, receipt_status, issuer_name):
        self._receipt_number = receipt_number
        self._issue_date = issue_date
        self._receipt_amount = receipt_amount
        self._payment_reference = payment_reference  # Reference to the related payment (distinct from the amount)
        self._receipt_status = receipt_status
        self._issuer_name = issuer_name

    # Setters and Getters
    def setReceiptNumber(self, receipt_number):
        self._receipt_number = receipt_number

    def getReceiptNumber(self):
        return self._receipt_number

    def setIssueDate(self, issue_date):
        self._issue_date = issue_date

    def getIssueDate(self):
        return self._issue_date

    def setReceiptAmount(self, receipt_amount):
        self._receipt_amount = receipt_amount

    def getReceiptAmount(self):
        return self._receipt_amount

    def setPaymentReference(self, payment_reference):
        self._payment_reference = payment_reference

    def getPaymentReference(self):
        return self._payment_reference

    def setreceipt_status(self, receipt_status):
        self.receipt_status = receipt_status

    def getreceipt_status(self):
        return self._receipt_status

    def setIssuerName(self, issuer_name):
        self._issuer_name = issuer_name

    def getIssuerName(self):
        return self._issuer_name

    # Methods
    def printReceipt(self):
        print(
            f"Receipt #{self._receipt_number}, Issued on: {self._issue_date}, Amount: {self._receipt_amount}, Reference: {self._payment_reference}, Status: {self._receipt_status}, Issuer: {self._issuer_name}")

# Example: Guest makes a reservation and payment
guest1 = Guest(202107777, "Ahmed Saleh", "ahmed123@gmail.com", "0505524242", "1995-02-25", "UAE")
room1 = Room(901, RoomType.DELUXE_KING, 150.00, RoomSize.LARGE, True, 9)
reservation1 = Reservation(2213771, "2020-01-01", "2020-01-10", 2, 9,room1, "Confirmed")

guest1.registerGuest()
room1.checkAvailability()
reservation1.makeReservation()
guest1.viewReservation(reservation1)

payment1 = Payment(92341, reservation1.calculateTotalCost(), "Completed", "Credit Card", "2020-01-01", 5.0)
payment1.applyDiscount(10)  # Applying a 10% discount
payment1.calculateCharges(5)  # Applying a 5% tax
payment1.processPayment()

receipt1 = Receipt(4214, 20200101, payment1.getAmount() , "92341", "Completed", "Hotel Staff")
receipt1.printReceipt()
